### 3.5.0 Playbook to download RPM packages
- hosts: localhost
  connection: local
  become: false
  gather_facts: no

  vars:
    download_dir: "{{ playbook_dir }}/roles/pg-rex-operation-tools-install/files"
    temp_dir: "/tmp/pg-rex-tools"
    
  tasks:
    # Ensure all required directories exist
    - name: Ensure all required directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - "{{ download_dir }}"
        - "{{ temp_dir }}"
        
    # Download the perl-IO-Tty RPM package directly from Rocky Linux repository
    - name: Download perl-IO-Tty RPM directly from Rocky Linux repo
      get_url:
        url: "{{ perl_io_tty_rpm_url }}"
        dest: "{{ download_dir }}/{{ perl_io_tty_rpm_url.split('/')[-1] }}"
        timeout: 60
      register: perl_io_download
        
    # Download the tarball containing the PG-REX tools and dependencies
    - name: Download PG-REX tools tarball
      get_url:
        url: "{{ pg_rex_tools_url }}"
        dest: "{{ temp_dir }}/{{ pg_rex_tools_url.split('/')[-1] }}"
        timeout: 120
        force: yes
        validate_certs: no
        use_proxy: yes
        http_agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36"
      register: pg_rex_download
      retries: 3
      delay: 5
      until: pg_rex_download is succeeded
      ignore_errors: yes

    # Check if file exists after download attempts
    - name: Check if tarball was downloaded by either method
      stat:
        path: "{{ temp_dir }}/{{ pg_rex_tools_url.split('/')[-1] }}"
      register: tarball_stat

    # Debug tarball size if it exists
    - name: Debug tarball info
      debug:
        msg: "Tarball exists: {{ tarball_stat.stat.exists }}, Size: {{ tarball_stat.stat.size | default('unknown') }} bytes"
      when: tarball_stat.stat is defined

    # Extract the downloaded tarball to access its contents
    - name: Extract PG-REX tools tarball
      unarchive:
        src: "{{ temp_dir }}/{{ pg_rex_tools_url.split('/')[-1] }}"
        dest: "{{ temp_dir }}"
        remote_src: yes
        list_files: yes
      register: extract_result
      when: tarball_stat.stat.exists and tarball_stat.stat.size > 0

    # Show extracted files for debugging
    - name: Show extracted files
      debug:
        msg: "First 10 extracted files: {{ (extract_result.files[:10] if extract_result.files|length > 10 else extract_result.files) | default(['No files extracted']) }}"
      when: extract_result is defined and extract_result.files is defined

    # List all files in temp directory recursively
    - name: List all files in temp directory
      shell: "find {{ temp_dir }} -type f -name '*.rpm' | sort"
      register: all_files
      changed_when: false
      when: tarball_stat.stat is defined and tarball_stat.stat.exists

    # Show all RPM files found
    - name: Show all RPM files found
      debug:
        msg: "RPM files found: {{ all_files.stdout_lines }}"
      when: all_files is defined and all_files.stdout_lines is defined

    # Locate the pg-rex operation tools script RPM in the extracted directory
    - name: Find pg-rex_operation_tools_script RPM in extracted files
      find:
        paths: "{{ temp_dir }}"
        patterns: "{{ pg_rex_operation_tools_script_rpm }}"
        recurse: yes
      register: pg_rex_script_find
      when: tarball_stat.stat.exists
        
    # Locate the Net_OpenSSH RPM in the extracted directory
    - name: Find Net_OpenSSH RPM in extracted files
      find:
        paths: "{{ temp_dir }}"
        patterns: "{{ net_openssh_rpm }}"
        recurse: yes
      register: net_openssh_find
      when: tarball_stat.stat.exists

    # Copy the found pg-rex operation tools script RPM to download directory
    - name: Copy pg-rex_operation_tools_script RPM to download directory
      shell: "cp '{{ item.path }}' '{{ download_dir }}/{{ pg_rex_operation_tools_script_rpm }}'"
      with_items: "{{ pg_rex_script_find.files }}"
      when: pg_rex_script_find.matched > 0
        
    # Copy the found Net_OpenSSH RPM to download directory
    - name: Copy Net_OpenSSH RPM to download directory
      shell: "cp '{{ item.path }}' '{{ download_dir }}/{{ net_openssh_rpm }}'"
      with_items: "{{ net_openssh_find.files }}"
      when: net_openssh_find.matched > 0

    # Clean up temporary directory
    - name: Clean up temporary directory
      file:
        path: "{{ temp_dir }}"
        state: absent
        
    # Verify that all required RPM packages were successfully downloaded
    - name: Check if all RPMs are downloaded
      stat:
        path: "{{ download_dir }}/{{ item }}"
      register: rpm_stat
      with_items:
        - "{{ pg_rex_operation_tools_script_rpm }}"
        - "{{ net_openssh_rpm }}"
        - "{{ perl_io_tty_rpm_url.split('/')[-1] }}"
        
    # Display a summary of which RPM packages were successfully downloaded
    - name: Show download results
      debug:
        msg: "Downloaded RPMs: {{ rpm_stat.results | selectattr('stat.exists', 'equalto', true) | map(attribute='item') | list }}"
        
    # Show warning for missing packages
    - name: Show warning for missing packages
      debug:
        msg: "WARNING: Failed to download the following packages: {{ rpm_stat.results | rejectattr('stat.exists', 'equalto', true) | map(attribute='item') | list }}"
      when: rpm_stat.results | rejectattr('stat.exists', 'equalto', true) | list | length > 0
