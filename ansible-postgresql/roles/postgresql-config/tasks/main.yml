### 3.4.3. Create directories for database cluster

# Create PostgreSQL data, WAL, and archive directories
- name: Create PostgreSQL related directories
  file:
    path: "{{ item }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
  loop:
    - "{{ PG_DATA }}"
    - "{{ PG_WAL }}"
    - "{{ PG_ARCHIVE }}"

### 3.4.4. Initialize DB Cluster (only on the first host)

# Block for initializing the primary PostgreSQL cluster
- block:

    # Extract the major version number from PG_REV
    - name: Extract PostgreSQL major version number
      set_fact:
        pg_major: "{{ PG_REV | regex_replace('^(\\d+)\\..*', '\\1') }}"

    # Check if the cluster is already initialized
    - name: Check if PostgreSQL cluster is already initialized
      stat:
        path: "{{ PG_DATA }}/PG_VERSION"
      register: _pg_version

    # Initialize the cluster only if not already initialized
    - block:

        # Create a temporary file to store the PostgreSQL password
        - name: Create temporary file for password
          tempfile:
            state: file
            suffix: .pgpass
          register: _tempfile

        # Write the PostgreSQL password to the temporary file
        - name: Write password to temporary file
          copy:
            content: "{{ PG_PASSWORD }}"
            dest: "{{ _tempfile.path }}"
            owner: postgres
            group: postgres
            mode: '0600'

        # Run initdb using the password file
        - name: Initialize the PostgreSQL database cluster
          command:
            cmd: /usr/pgsql-{{ pg_major }}/bin/initdb -D {{ PG_DATA }} -X {{ PG_WAL }} --encoding=UTF8 --no-locale --data-checksums --pwfile={{ _tempfile.path }}
          become_user: postgres

      # Always remove the temporary password file
      always:
        - name: Remove temporary password file
          file:
            path: "{{ _tempfile.path }}"
            state: absent

      when: not _pg_version.stat.exists

    ### 3.4.5. Edit postgresql.conf

    # Modify postgresql.conf with custom parameters
    - name: Edit postgresql.conf settings
      lineinfile:
        path: "{{ PG_DATA }}/postgresql.conf"
        regexp: ^#?({{ item.0 }}) = (?:'(?:[^']|'')*'|[^ ]+)(\s+#.*)?$
        line: \1 = {{ item.1 }}\2
        backrefs: true
      loop:
        - [listen_addresses, "'*'"]
        - [port, "{{ PG_PORT }}"]
        - [superuser_reserved_connections, 10]
        - [password_encryption, scram-sha-256]
        - [wal_level, replica]
        - [synchronous_commit, "on"]
        - [archive_mode, "always"]
        - [archive_command, "'/bin/cp %p {{ PG_ARCHIVE }}/%f'"]
        - [max_wal_senders, 10]
        - [wal_keep_size, 512MB]
        - [wal_sender_timeout, 20s]
        - [max_replication_slots, 10]
        - [hot_standby, "on"]
        - [max_standby_archive_delay, -1]
        - [max_standby_streaming_delay, -1]
        - [hot_standby_feedback, "on"]
        - [wal_receiver_timeout, 20s]
        - [restart_after_crash, "off"]

    ### 3.4.6. Create replication user (repuser)

    # Check if a signal file exists indicating repuser was created
    - name: Check if replication user signal file exists
      stat:
        path: "{{ PG_DATA }}/.repuser_exists.signal"
      register: _repuser_exists_signal

    # Create repuser only if signal file does not exist
    - block:

        # Start PostgreSQL server temporarily
        - name: Start PostgreSQL server
          command:
            cmd: /usr/pgsql-{{ pg_major }}/bin/pg_ctl start -D {{ PG_DATA }}
            creates: "{{ PG_DATA }}/postmaster.pid"

        # Check if replication user already exists
        - name: Check if replication user exists
          command:
            cmd: /usr/pgsql-{{ pg_major }}/bin/psql -c "SELECT 'repuser_exists' WHERE EXISTS (SELECT * FROM pg_roles WHERE rolname = '{{ PG_REPLICATION_USER }}')" -p {{ PG_PORT }}
          register: _psql
          changed_when: false

        # Create replication user if not exists
        - name: Create replication user
          command:
            cmd: /usr/pgsql-{{ pg_major }}/bin/psql -c "CREATE ROLE {{ PG_REPLICATION_USER }} REPLICATION LOGIN PASSWORD '{{ PG_REPLICATION_PASSWORD }}'" -p {{ PG_PORT }}
          when: _psql.stdout is not search('repuser_exists')

        # Stop PostgreSQL server
        - name: Stop PostgreSQL server
          command:
            cmd: /usr/pgsql-{{ pg_major }}/bin/pg_ctl stop -D {{ PG_DATA }}
            removes: "{{ PG_DATA }}/postmaster.pid"

        # Create signal file to indicate repuser was created
        - name: Create repuser exists signal file
          file:
            path: "{{ PG_DATA }}/.repuser_exists.signal"
            state: touch

      become_user: postgres
      when: not _repuser_exists_signal.stat.exists

    ### 3.4.7. Edit pg_hba.conf

    # Add replication and access rules to pg_hba.conf
    - name: Edit pg_hba.conf
      blockinfile:
        path: "{{ PG_DATA }}/pg_hba.conf"
        block: |
          host all all {{ M_LAN_ADDR | ansible.utils.ipsubnet(24) }} scram-sha-256
          {% for item in groups.all %}
          host replication {{ PG_REPLICATION_USER }} {{ hostvars[item].D_LAN_ADDR }}/32 scram-sha-256
          {% endfor %}

  when: inventory_hostname == ansible_play_hosts[0]

### 3.4.8. Create .pgpass file for replication

# Collect the D-LAN IPs of other nodes for replication
- name: Collect D-LAN addresses of other nodes
  set_fact:
    replication_pgpass_entries: >-
      {{
        groups['all'] | difference([inventory_hostname]) | map('extract', hostvars, 'D_LAN_ADDR') | list
      }}

# Create .pgpass file containing replication credentials
- name: Create .pgpass file for replication
  blockinfile:
    path: /var/lib/pgsql/.pgpass
    block: |
      {{ PG_REPLICATION_ADDRESS }}:{{ PG_PORT }}:replication:{{ PG_REPLICATION_USER }}:{{ PG_REPLICATION_PASSWORD }}
      {% for ip in replication_pgpass_entries %}
      {{ ip }}:{{ PG_PORT }}:replication:{{ PG_REPLICATION_USER }}:{{ PG_REPLICATION_PASSWORD }}
      {% endfor %}
    owner: postgres
    group: postgres
    mode: '0600'
    create: true
